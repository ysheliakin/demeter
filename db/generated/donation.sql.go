// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: donation.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDonation = `-- name: CreateDonation :one
insert into donations(
    title, created_by_user_id, created_at, starts_at, ends_at, description, images, servings_total, servings_left, location_lat, location_long
)
values (
    $1, $2, NOW(), $3, $4, $5, $6, $7, $8, $9, $10
)
returning id
`

type CreateDonationParams struct {
	Title           string
	CreatedByUserID int32
	StartsAt        pgtype.Timestamp
	EndsAt          pgtype.Timestamp
	Description     string
	Images          pgtype.Text
	ServingsTotal   pgtype.Int4
	ServingsLeft    pgtype.Int4
	LocationLat     pgtype.Numeric
	LocationLong    pgtype.Numeric
}

func (q *Queries) CreateDonation(ctx context.Context, arg CreateDonationParams) (int32, error) {
	row := q.db.QueryRow(ctx, createDonation,
		arg.Title,
		arg.CreatedByUserID,
		arg.StartsAt,
		arg.EndsAt,
		arg.Description,
		arg.Images,
		arg.ServingsTotal,
		arg.ServingsLeft,
		arg.LocationLat,
		arg.LocationLong,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createRequest = `-- name: CreateRequest :one
insert into donation_requests(donation_id, requester_id, comment, created_at)
values ($1, $2, $3, NOW())
returning id
`

type CreateRequestParams struct {
	DonationID  pgtype.Int4
	RequesterID pgtype.Int4
	Comment     pgtype.Text
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (int32, error) {
	row := q.db.QueryRow(ctx, createRequest, arg.DonationID, arg.RequesterID, arg.Comment)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getDonation = `-- name: GetDonation :one
select id, created_by_user_id, created_at, starts_at, ends_at, description, images, servings_total, servings_left, location_lat, location_long, title
from donations
where id = $1
`

func (q *Queries) GetDonation(ctx context.Context, id int32) (Donation, error) {
	row := q.db.QueryRow(ctx, getDonation, id)
	var i Donation
	err := row.Scan(
		&i.ID,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.StartsAt,
		&i.EndsAt,
		&i.Description,
		&i.Images,
		&i.ServingsTotal,
		&i.ServingsLeft,
		&i.LocationLat,
		&i.LocationLong,
		&i.Title,
	)
	return i, err
}

const getDonations = `-- name: GetDonations :many
SELECT id, created_by_user_id, created_at, starts_at, ends_at, description, images, servings_total, servings_left, location_lat, location_long, title 
FROM donations
ORDER BY id DESC
`

func (q *Queries) GetDonations(ctx context.Context) ([]Donation, error) {
	rows, err := q.db.Query(ctx, getDonations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Donation
	for rows.Next() {
		var i Donation
		if err := rows.Scan(
			&i.ID,
			&i.CreatedByUserID,
			&i.CreatedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Description,
			&i.Images,
			&i.ServingsTotal,
			&i.ServingsLeft,
			&i.LocationLat,
			&i.LocationLong,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
